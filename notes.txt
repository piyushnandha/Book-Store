app.listen(port no, callback fxn);  --> isse app start hoga jaha hona hai ise

app.get('/route jaha krna hai',(req,res)=>{});


//DATABASE CONNECTION
ek url rakhna usko export krnaa
syntax: export const varname= jo export krna hai woh...can be callback fxn also;

MONGOOSE LIBRARY USE TO CONNECT MONGODB WITH SERVER
mongoose.connect(url (import kr lena) ).then(ander callback fxn se console that db printd).catch(if any err)

mongoose.connect(mongDbURL)
.then(()=>{
    console.log('app connected to db');
    app.listen(PORT,()=>{
        console.log(`working :${PORT}`); --> app listen only when connect to db
    })
})
.catch((err)=>{
    console.log(err);
});


const bookSchema = mongoose.Schema(

    title: 
    author :
    etc
)

export const Book=mongoose.model('Cat',bookSchema);
                

                ADD BOOK IN DATABASE
import Book from......

app.use(express.json())--> json format me leta
app.post('/books',async(req,res)=>{
    try {
        if(
            !req.body.title||
            !req.body.author||     -->sare details hona
            !req.body.publishYear
        ){
            console.log("provide all details");
        }

        const newBook={
            title:req.body.title,
            author:req.body.author,
            publishYear:req.body.publishYear
        }
        
        const book=await Book.create(newBook);
        return res.status(201).send(book);
        
    } catch (error) {
        console.log(error);
        res.status(500).send({message:error.message})
    }
})

        FIND ALL BOOK IN DATABASE

const books =await Book.find({}); -->find all book
        return res.status(200).json({
            count:books.length,             -->print count of book and data
            data:books
        });


        FIND ONE BOOK BY ID
        app.get('/books/:id',async (req,res)=>
        const{id}=req.params;
        const book =await Book.findById(id);
        )


        FIND AND UPDATE
        app.put use karege

        if(
            !req.body.title||
            !req.body.author||     -->sare details hona
            !req.body.publishYear
        )

        const {id}=req.params;
            const result=await Book.findByIdAndUpdate(id,req.body);

            if(!result){
                return res.status(404).send({message:"book not found"});
            }




            //CORS
Consider our application to be a restaurant. The origin is the address of our restaurant. The front end is the dining area and the backend
is the kitchen. Both the dining area and the kitchen are at the same address. This enables them to exchange food and service,or in our case
, resources. Now, there could be a case where the guests are feeling sick and they request medicine which needs to be fetched from 
another address outside of the restaurant. In technical terms, the front end requesting to a back end outside of its origin. Thus, this 
mechanism where a front-end sends a request to a different back-end for some additional service or resource is known as Cross-Origin Resource Sharing.
            app.use(
    cors({
        origin:'http://localhost:3000',
        methods:['GET','POST','PUT','DELETE'],
        allowedHeaders:['Content-Type'],
    })
);



//FRONTEND

npm create vite@latest
select react and javascript

then go to tailwand css and in install update